generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                 @id @default(autoincrement())
  name            String
  email           String              @unique
  password        String
  birthDate       DateTime
  about           String?
  phone           String?
  profileImage    String?             @default("https://www.w3schools.com/howto/img_avatar.png")
  deleted         Boolean             @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relações
  diagnoses       Diagnosis[]
  preventionActivities PreventionActivity[]
  medicalHistory  MedicalHistory?
  preferences     UserPreferences?
  notifications   Notification[]
}

model MedicalHistory {
  id                Int      @id @default(autoincrement())
  existingConditions String[]
  familyHistory     String[]
  medications       String[]
  userId            Int      @unique
  user              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model UserPreferences {
  id                  Int      @id @default(autoincrement())
  notificationsEnabled Boolean  @default(true)
  reminderFrequency    String   @default("daily")
  language             String   @default("pt")
  theme                String   @default("light") // light, dark
  userId               Int      @unique
  user                 User     @relation(fields: [userId], references: [id])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Diagnosis {
  id              Int      @id @default(autoincrement())
  imageUrl        String
  condition       String
  severity        String   // low, medium, high
  score           Int      // 0-100
  description     String
  recommendations String[]
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  eyeImages       EyeImage[]
  createdAt       DateTime @default(now())
}

model PreventionActivity {
  id          Int      @id @default(autoincrement())
  type        String   // exercise, rest, medication
  description String
  duration    Int      // minutes
  notes       String?
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  completedAt DateTime @default(now())
}

model PreventionTip {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  category    String
  display     Boolean  @default(true) // Controls daily display
  createdAt   DateTime @default(now())

  @@index([display])
}

model EyeExercise {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  instructions String[]
  duration     Int      // minutes
  imageUrl     String?
  videoUrl     String?
  createdAt    DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  type      String   // info, success, warning, error
  read      Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model EyeImage {
  id          Int      @id @default(autoincrement())
  url         String
  type        String   // left, right, both
  diagnosisId Int?
  diagnosis   Diagnosis? @relation(fields: [diagnosisId], references: [id])
  createdAt   DateTime @default(now())
}
