generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  CLINIC
  ADMIN
}

enum ClinicStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

model User {
  id              Int                 @id @default(autoincrement())
  name            String
  email           String              @unique
  password        String
  birthDate       DateTime
  about           String?
  phone           String?
  profileImage    String?             @default("https://www.w3schools.com/howto/img_avatar.png")
  role            UserRole            @default(USER)
  deleted         Boolean             @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relações
  diagnoses       Diagnosis[]
  preventionActivities PreventionActivity[]
  medicalHistory  MedicalHistory?
  preferences     UserPreferences?
  notifications   Notification[]
  userTips        UserTip[]
  userExercises   UserExercise[]
  savedTips       SavedTip[]

  // Relações específicas para clínicas
  clinic          Clinic?
  patients        Patient[]           // Pacientes atendidos (se for clínica)

  // Relações para admin
  approvedClinics Clinic[]           @relation("AdminApprovals")
}

model MedicalHistory {
  id                Int      @id @default(autoincrement())
  existingConditions String[]
  familyHistory     String[]
  medications       String[]
  userId            Int      @unique
  user              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model UserPreferences {
  id                  Int      @id @default(autoincrement())
  notificationsEnabled Boolean  @default(true)
  reminderFrequency    String   @default("daily")
  language             String   @default("pt")
  theme                String   @default("light") // light, dark
  userId               Int      @unique
  user                 User     @relation(fields: [userId], references: [id])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Diagnosis {
  id              Int      @id @default(autoincrement())
  imageUrl        String
  condition       String
  severity        String   // low, medium, high
  score           Int      // 0-100
  description     String
  recommendations String[]
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  eyeImages       EyeImage[]
  createdAt       DateTime @default(now())
}

model PreventionActivity {
  id          Int      @id @default(autoincrement())
  type        String   // exercise, rest, medication
  description String
  duration    Int      // minutes
  notes       String?
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  completedAt DateTime @default(now())
}

model PreventionTip {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  category    String
  display     Boolean  @default(true) // Controls daily display
  createdAt   DateTime @default(now())

  @@index([display])
}

model EyeExercise {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  instructions String[]
  duration     Int      // minutes
  imageUrl     String?
  videoUrl     String?
  createdAt    DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  type      String   // info, success, warning, error
  read      Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model EyeImage {
  id          Int      @id @default(autoincrement())
  url         String
  type        String   // left, right, both
  diagnosisId Int?
  diagnosis   Diagnosis? @relation(fields: [diagnosisId], references: [id])
  createdAt   DateTime @default(now())
}

// Dicas personalizadas por usuário geradas por IA
model UserTip {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  category    String
  display     Boolean  @default(true) // Controls daily display rotation
  generatedBy String   @default("ai") // ai, manual, system
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, display])
  @@index([createdAt])
}

// Exercícios personalizados por usuário gerados por IA
model UserExercise {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  instructions String[]
  duration     Int      // minutes
  category     String   // eye_movement, focus, relaxation, etc
  display      Boolean  @default(true) // Controls daily display rotation
  generatedBy  String   @default("ai") // ai, manual, system
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId, display])
  @@index([createdAt])
}

// Dicas salvas pelo usuário
model SavedTip {
  id        Int      @id @default(autoincrement())
  userId    Int
  tipId     Int?     // Para dicas gerais (PreventionTip)
  userTipId Int?     // Para dicas personalizadas (UserTip)
  tipType   String   // 'general' ou 'personal'
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, tipId, tipType])
  @@unique([userId, userTipId, tipType])
  @@index([userId])
}

// Modelo para Clínicas
model Clinic {
  id              Int           @id @default(autoincrement())
  name            String
  cnpj            String        @unique
  address         String
  city            String
  state           String
  zipCode         String
  phone           String
  email           String        @unique
  website         String?
  specialties     String[]      // Especialidades médicas
  description     String?
  logo            String?
  status          ClinicStatus  @default(PENDING)

  // Dados do responsável
  responsibleName String
  responsibleCpf  String
  responsibleCrm  String?       // CRM do médico responsável

  // Relacionamentos
  userId          Int           @unique
  user            User          @relation(fields: [userId], references: [id])
  approvedBy      Int?
  approver        User?         @relation("AdminApprovals", fields: [approvedBy], references: [id])
  patients        Patient[]
  patientDiagnoses PatientDiagnosis[]

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  approvedAt      DateTime?

  @@index([status])
  @@index([city, state])
}

// Modelo para Pacientes
model Patient {
  id              Int           @id @default(autoincrement())
  name            String
  email           String?
  phone           String?
  cpf             String?       @unique
  birthDate       DateTime
  gender          String?       // M, F, Other
  address         String?
  city            String?
  state           String?
  zipCode         String?

  // Dados médicos
  allergies       String[]      @default([])
  medications     String[]      @default([])
  medicalHistory  String[]      @default([])

  // Relacionamentos
  clinicId        Int
  clinic          Clinic        @relation(fields: [clinicId], references: [id])
  addedBy         Int           // Usuário da clínica que adicionou
  addedByUser     User          @relation(fields: [addedBy], references: [id])

  // Diagnósticos
  diagnoses       PatientDiagnosis[]

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([clinicId])
  @@index([cpf])
}

// Diagnósticos específicos para pacientes de clínicas
model PatientDiagnosis {
  id              Int           @id @default(autoincrement())
  imageUrl        String
  condition       String
  severity        String        // low, medium, high
  score           Int           // 0-100
  description     String
  recommendations String[]

  // Validação por especialista
  validated       Boolean       @default(false)
  validatedBy     Int?
  validatedAt     DateTime?
  specialistNotes String?
  correctedCondition String?    // Se o especialista corrigir
  correctedSeverity String?

  // Relacionamentos
  patientId       Int
  patient         Patient       @relation(fields: [patientId], references: [id])
  clinicId        Int
  clinic          Clinic        @relation(fields: [clinicId], references: [id])

  // Feedback para ML
  feedback        SpecialistFeedback?

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([patientId])
  @@index([clinicId])
  @@index([validated])
}

// Feedback de especialistas para melhorar o modelo
model SpecialistFeedback {
  id                    Int               @id @default(autoincrement())
  diagnosisId           Int               @unique
  diagnosis             PatientDiagnosis  @relation(fields: [diagnosisId], references: [id])

  // Avaliação do especialista
  isCorrect             Boolean           // Se o diagnóstico da IA estava correto
  correctCondition      String?           // Condição correta segundo especialista
  correctSeverity       String?           // Severidade correta
  confidence            Int               // Confiança do especialista (1-10)
  notes                 String?           // Observações do especialista

  // Dados do especialista
  specialistName        String
  specialistCrm         String
  specialistSpecialty   String

  // Status do feedback
  processed             Boolean           @default(false)  // Se foi usado para treinar o modelo
  processedAt           DateTime?

  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([isCorrect])
  @@index([processed])
  @@index([specialistCrm])
}

