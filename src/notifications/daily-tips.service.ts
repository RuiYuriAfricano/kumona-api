import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { NotificationsService } from './notifications.service';
import { Cron, CronExpression } from '@nestjs/schedule';

@Injectable()
export class DailyTipsService {
  private readonly logger = new Logger(DailyTipsService.name);

  private readonly tips = [
    {
      title: 'üëÅÔ∏è Dica de Sa√∫de Ocular',
      message: 'Lembre-se de piscar com frequ√™ncia! Piscar ajuda a manter os olhos hidratados e limpos.',
      type: 'info'
    },
    {
      title: 'üíª Cuidado com as Telas',
      message: 'Siga a regra 20-20-20: a cada 20 minutos, olhe para algo a 20 p√©s de dist√¢ncia por 20 segundos.',
      type: 'info'
    },
    {
      title: 'ü•ï Alimenta√ß√£o Saud√°vel',
      message: 'Consuma alimentos ricos em vitamina A, como cenoura, espinafre e batata-doce para manter a sa√∫de dos olhos.',
      type: 'info'
    },
    {
      title: '‚òÄÔ∏è Prote√ß√£o Solar',
      message: 'Use √≥culos de sol com prote√ß√£o UV sempre que sair ao ar livre, mesmo em dias nublados.',
      type: 'info'
    },
    {
      title: 'üíß Hidrata√ß√£o',
      message: 'Mantenha-se hidratado! Beber √°gua suficiente ajuda a manter os olhos lubrificados.',
      type: 'info'
    },
    {
      title: 'üò¥ Descanso Visual',
      message: 'Durma pelo menos 7-8 horas por noite. O descanso adequado √© essencial para a sa√∫de ocular.',
      type: 'info'
    },
    {
      title: 'üßº Higiene Ocular',
      message: 'Lave as m√£os antes de tocar nos olhos e evite esfregar os olhos com for√ßa.',
      type: 'info'
    },
    {
      title: 'üèÉ‚Äç‚ôÇÔ∏è Exerc√≠cios Oculares',
      message: 'Fa√ßa exerc√≠cios oculares simples: mova os olhos em c√≠rculos, para cima e para baixo, e de um lado para o outro.',
      type: 'info'
    },
    {
      title: 'üîç Exames Regulares',
      message: 'Fa√ßa exames oftalmol√≥gicos regulares, mesmo que n√£o tenha sintomas. A preven√ß√£o √© o melhor rem√©dio!',
      type: 'info'
    },
    {
      title: 'üí° Ilumina√ß√£o Adequada',
      message: 'Use ilumina√ß√£o adequada ao ler ou trabalhar. Evite luz muito forte ou muito fraca.',
      type: 'info'
    }
  ];

  constructor(
    private prisma: PrismaService,
    private notificationsService: NotificationsService,
  ) {}

  // Executar todos os dias √†s 9:00 AM
  @Cron('0 9 * * *')
  async sendDailyTips() {
    this.logger.log('Iniciando envio de dicas di√°rias...');

    try {
      // Buscar todos os usu√°rios ativos
      const users = await this.prisma.user.findMany({
        where: { 
          deleted: false,
          role: 'USER' // Apenas usu√°rios normais
        },
        select: { id: true, name: true }
      });

      // Selecionar uma dica aleat√≥ria
      const randomTip = this.tips[Math.floor(Math.random() * this.tips.length)];

      let successCount = 0;
      let errorCount = 0;

      // Enviar dica para cada usu√°rio
      for (const user of users) {
        try {
          await this.notificationsService.createNotification(
            user.id,
            randomTip.title,
            randomTip.message,
            randomTip.type
          );
          successCount++;
        } catch (error) {
          this.logger.error(`Erro ao enviar dica di√°ria para usu√°rio ${user.id}:`, error);
          errorCount++;
        }
      }

      this.logger.log(`Dicas di√°rias enviadas: ${successCount} sucessos, ${errorCount} erros`);
    } catch (error) {
      this.logger.error('Erro ao enviar dicas di√°rias:', error);
    }
  }

  // M√©todo para enviar dica personalizada para um usu√°rio espec√≠fico
  async sendPersonalizedTip(userId: number, tipIndex?: number) {
    try {
      const user = await this.prisma.user.findUnique({
        where: { id: userId, deleted: false },
        select: { id: true, name: true }
      });

      if (!user) {
        throw new Error('Usu√°rio n√£o encontrado');
      }

      // Usar √≠ndice espec√≠fico ou selecionar aleatoriamente
      const selectedTip = tipIndex !== undefined 
        ? this.tips[tipIndex % this.tips.length]
        : this.tips[Math.floor(Math.random() * this.tips.length)];

      await this.notificationsService.createNotification(
        userId,
        selectedTip.title,
        selectedTip.message,
        selectedTip.type
      );

      this.logger.log(`Dica personalizada enviada para usu√°rio ${userId}`);
      return true;
    } catch (error) {
      this.logger.error(`Erro ao enviar dica personalizada para usu√°rio ${userId}:`, error);
      return false;
    }
  }

  // M√©todo para obter todas as dicas dispon√≠veis
  getAllTips() {
    return this.tips;
  }

  // M√©todo para obter uma dica espec√≠fica
  getTip(index: number) {
    return this.tips[index % this.tips.length];
  }
}
